# 默认的 8080 我们将它改成 9090
#server.port=9090
# 未定义上下文路径之前 地址是 http://localhost:8080 定义了后 http://localhost:9090 你能在tomcat做的事情，配置文件都可以
#server.servlet.context-path = /persiondemo

# 自定义属性
# 年龄
my1.age=25
# 名字
my1.name=canzhen
#测试文件上传路径
path.test-upload-path=D:\\PDM\\demoupload\\
#path.testDownloadPath=


# 日志级别
#该配置只对 嵌入式容器、Spring、Hibernate生效
#debug=true

# 日志输出级别配置
#logging.level.root = WARN
#logging.level.org.springframework.web = DEBUG
#logging.level.org.hibernate = ERROR

#比如 mybatis sql日志
#logging.level.org.mybatis = INFO
#logging.level.mapper所在的包 = DEBUG

# 日志颜色编码
spring.output.ansi.enabled=always

# 日志文件,主要用于测试环境和需求环境，开发环境直接控制台
#logging.path=/persiondemo/var/log
#logging.file=/PDM/persiondemo/log/logBack.txt
#logging.file.max-size=10MB
#logging.file.max-history=2

#模板热部署、禁用 thymeleaf 缓存
spring.thymeleaf.cache=false

#redis配置
spring.redis.host=localhost
spring.redis.password=123456
# 一般来说是不用配置的，Spring Cache 会根据依赖的包自行装配
spring.cache.type=redis
# 连接超时时间（毫秒）
spring.redis.timeout=10000ms
# Redis默认情况下有16个分片，这里配置具体使用的分片，默认是0
spring.redis.database=0
# 连接池最大连接数（使用负值表示没有限制） 默认 8
spring.redis.lettuce.pool.max-active=8
# 连接池最大阻塞等待时间（使用负值表示没有限制） 默认 -1
spring.redis.lettuce.pool.max-wait=-1ms
# 连接池中的最大空闲连接 默认 8
spring.redis.lettuce.pool.max-idle=8
# 连接池中的最小空闲连接 默认 0
spring.redis.lettuce.pool.min-idle=0

########## Mybatis 自身配置 ##########
# 注意注意
#mybatis.mapper-locations=classpath:mapper/*.xml        #这种方式需要自己在resources目录下创建mapper目录然后存放xml
mybatis.mapper-locations=classpath:com/canzhen.persiondemo/mapper/*.xml
mybatis.type-aliases-package=com.canzhen.persiondemo.bean
# 驼峰命名规范 如：数据库字段是  order_id 那么 实体字段就要写成 orderId
mybatis.configuration.map-underscore-to-camel-case=true
# 如果想看到mybatis日志需要做如下配置
logging.level.com.canzhen.persiondemo=DEBUG

########## 通用Mapper ##########
# 主键自增回写方法,默认值MYSQL,详细说明请看文档
mapper.identity=MYSQL
mapper.mappers=tk.mybatis.mapper.common.BaseMapper
# 设置 insert 和 update 中，是否判断字符串类型!=''
mapper.not-empty=true
# 枚举按简单类型处理
mapper.enum-as-simple-type=true

########## 分页插件 ##########
pagehelper.helper-dialect=mysql
pagehelper.params=count=countSql
pagehelper.reasonable=false
pagehelper.support-methods-arguments=true

#配置rabbitmq相关内容，值得注意的是这里配置了手动ACK的开关,当前设置为admin，权限为/
spring.rabbitmq.username=canzhen
spring.rabbitmq.password=123456
spring.rabbitmq.host=127.0.0.1
spring.rabbitmq.port=5672
spring.rabbitmq.virtual-host=/
# 手动ACK 不开启自动ACK模式,目的是防止报错后未正确处理消息丢失 默认 为 none
spring.rabbitmq.listener.simple.acknowledge-mode=manual

##Actuator配置
## 描述信息
#info.blog-url=http://blog.canzhen.com
#info.author=Canzhen
#info.version=@project.version@
#info.name=@project.artifactId@
## 加载所有的端点/默认只加载了 info / health
#management.endpoints.web.exposure.include=*
## 比较重要,默认 /actuator spring-boot-admin 扫描不到
#management.endpoints.web.base-path=/
#management.endpoint.health.show-details=always
#spring.boot.admin.client.url=http://localhost:8080/persiondemo
## 不配置主机名，看着不舒服....
#spring.boot.admin.client.instance.prefer-ip=true
## 可以关闭制定的端点
#management.endpoint.shutdown.enabled=false
## 路径映射，将 health 路径映射成 rest_health 那么在访问 health 路径将为404，因为原路径已经变成 rest_health 了，一般情况下不建议使用
## management.endpoints.web.path-mapping.health=rest_health
## 选择激活对应环境spring.profiles.active的配置，如果是dev则代表不用认证就能访问监控页，prod代表需要认证
##spring.profiles.active=prod
##为了安全起见，应采用认证的方式
## 登陆所需的账号密码
#spring.security.user.name=canzhen
#spring.security.user.password=canzhen
## 便于客户端可以在受保护的服务器上注册api
#spring.boot.admin.client.username=canzhen
#spring.boot.admin.client.password=canzhen
## 便服务器可以访问受保护的客户端端点
#spring.boot.admin.client.instance.metadata.user.name=canzhen
#spring.boot.admin.client.instance.metadata.user.password=canzhen

#文件上传配置
# 是否支持批量上传   (默认值 true)
spring.servlet.multipart.enabled=true
# 上传文件的临时目录 （一般情况下不用特意修改）
spring.servlet.multipart.location=
# 上传文件最大为 1M （默认值 1M 根据自身业务自行控制即可），即 1048576 b
spring.servlet.multipart.max-file-size=1048576
# 上传请求最大为 10M（默认值10M 根据自身业务自行控制即可）
spring.servlet.multipart.max-request-size=10485760
# 文件大小阈值，当大于这个阈值时将写入到磁盘，否则存在内存中，（默认值0 一般情况下不用特意修改）
spring.servlet.multipart.file-size-threshold=0
# 判断是否要延迟解析文件（相当于懒加载，一般情况下不用特意修改）
spring.servlet.multipart.resolve-lazily=false

#liquibase依赖
#只要依赖了 liquibase-core 默认可以不用做任何配置，但还是需要知道默认配置值是什么，这样方便定位和解决问题
# spring.liquibase.enabled=true
# spring.liquibase.change-log=classpath:/db/changelog/db.changelog-master.yaml



#开发环境端口号
server.port=8080
#开发环境上下文根
#server.servlet.context-path=/persiondemo

#开发库
spring.datasource.url=jdbc:mysql://localhost:3306/persiondemo?useUnicode=true&characterEncoding=UTF-8&zeroDateTimeBehavior=convertToNull&allowMultiQueries=true&useSSL=false
spring.datasource.password=root
spring.datasource.username=root
#spring.datasource.type
#更多细微的配置可以通过下列前缀进行调整
#spring.datasource.hikari
#spring.datasource.tomcat
#spring.datasource.dbcp2

## JPA配置
#spring.jpa.hibernate.ddl-auto=update
## 输出日志
#spring.jpa.show-sql=true
## 数据库类型
#spring.jpa.database=mysql

#配置spring.swagger.enabled开启swagger的使用，如果在生产环境中不想用可以在对应的profile下面将它设置为spring.swagger.enabled=false，这样一来接口就不存在暴露的风险
# 扫描的包路径,默认扫描所有
spring.swagger.base-package=com.canzhen.persiondemo
# 默认为 true
spring.swagger.enabled=true